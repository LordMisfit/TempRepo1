class TestPlayerPawn : DoomPlayer
{
	// Spreader Aura Level 1 Angles
	const spread1angle1 = -15.0;
	const spread1angle2 = 15.0;
	const spread1horz1 = 0.0;
	const spread1horz2 = 0.0;
	const spread1height1 = 0.0;
	const spread1height2 = 0.0;

	// Spreader Aura Level 2 Angles/Pitches
	const spread2angle1 = -7.5;
	const spread2angle2 = 7.5;
	const spread2horz1 = 0.0;
	const spread2horz2 = 0.0;
	const spread2pitch1 = -7.5;
	const spread2pitch2 = 7.5;
	const spread2height1 = 0.0;
	const spread2height2 = 0.0;

	int user_PlayerDVDSSpecial[256];
	int MeleeAtkRange;

	int jiggle_jump, jiggle_crouch, jiggle_left, jiggle_right, jiggle_up, jiggle_down;	int actortimer;
	int firsttic;
	int pbuddha1, pbuddha2, pgod1, pgod2, pnoclip1, pnoclip2;
	int breathdirection; // 0 = down [size decreases], 1 = up [size increases]
	int mobjdmg;
	int playoutputdmg;
	int playtookdamage;
	double basexscale, baseyscale;
	double scalexmulti, scaleymulti;
	double lastvelx;
	double lastvely;
	double lastvelz;
	int breathframe;
	
	int saveddamage;
	int InvisNeedleBonus;
	
	double PlayerDefenseIgnoreFactor, PlayerArmorIgnoreFactor, PlayerArmorIgnoreFactorGeneral;
	double neverbleeds, menufreezecheck;

	private class<Inventory> APPackToken, APPackCheck, MiscCheck;

	double TotalAirControl;
	default
	{
		Player.StartItem "TestWeapon";
		Player.WeaponSlot 1, "Fist", "Chainsaw", "TestWeapon";
	}
}

class BaseWeapon : Weapon 
{
	// Misc 
	const BerserkRecoilMulti = 2.5;
	const minxymoveneg = -3.814697266;
	const minxymovepos = 3.814697266;
	const minzmoveneg = -1.907348633;
	const minzmovepos = 1.907348633;

	// Spreader Aura Level 1 Angles
	const spread1angle1 = -15.0;
	const spread1angle2 = 15.0;
	const spread1horz1 = 0.0;
	const spread1horz2 = 0.0;
	const spread1height1 = 0.0;
	const spread1height2 = 0.0;

	// Spreader Aura Level 2 Angles/Pitches
	const spread2angle1 = -7.5;
	const spread2angle2 = 7.5;
	const spread2horz1 = 0.0;
	const spread2horz2 = 0.0;
	const spread2pitch1 = -7.5;
	const spread2pitch2 = 7.5;
	const spread2height1 = 0.0;
	const spread2height2 = 0.0;

	// FOR THE GZDoom Devs, these two vars below can be commented or uncommented without causing errors on loadup to test the issue.
	// If you comment out just one of them, using the normal attack will prevent the player's weapons from bobbing. 
	// If you comment out BOTH, if you then use the alt-fire of your weapon, you become unable to use walls/doors/lines and don't even make grunt noises.
	// ************************************
	//int FrameValue;
	//int FrameValue2;
	// ************************************

	int FlameCount;
	int FrameCount;
	int SceptreTimer;
	int SceptreTimerLimit;
	int finaldamagedealt;
	int finaldamagedealt2;
	int finaldamagedealt3;
	int finaldamagedealt4;
	int finalmeleedamagedealt;
	int finalmeleedamagedealt2;
	int finalmeleedamagedealt3;
	int finalmeleedamagedealt4;
	string attackname1, attackname2, attackname3, attackname4, attackname5;

	private class<Inventory> APPackToken, APPackCheck, APPackCheck2, APPackCheck3, APPackCheck4, iDTech1Check, iDTech1Check2, iDTech1Check3, iDTech1Check4;

	void A_GetSceptreDamage(int attacktype = 0, int attacklevel = 0, int shockwave = 0)
	{
		let weapon = player.ReadyWeapon;
		string weaponname = weapon.GetClassName();
		string actorname = GetClassName();
		int damage;
		int previousdamage;
		int strengthcounter;
		int sceptrestrbase;
		int sceptrestrmin;
		int sceptrestrmax;
		int PerkFactor;
		int SceptreActualLevel;
		int CharacterClass;
		int debugmelee;
		
		if (SceptreActualLevel <= 0) damage = random(275,325); // Base Damage Range
		if (SceptreActualLevel == 1) damage = random(280,330); // +5 Damage Range
		if (SceptreActualLevel == 2) damage = random(290,340); // +10 Damage Range
		if (SceptreActualLevel == 3) damage = random(320,370); // +30 Damage Range
		if (SceptreActualLevel == 4) damage = random(340,390); // +20 Damage Range
		if (SceptreActualLevel == 5) damage = random(365,415); // +25 Damage Range
		if (SceptreActualLevel == 6) damage = random(425,475); // +60 Damage Range
		if (SceptreActualLevel == 7) damage = random(425,475); // +0 Damage Range
		if (SceptreActualLevel == 8) damage = random(545,595); // +120 Damage Range
		if (SceptreActualLevel == 9) damage = random(590,640); // +45 Damage Range
		if (SceptreActualLevel == 10) damage = random(640,690); // +50 Damage Range
		if (SceptreActualLevel == 11) damage = random(750,800); // +110 Damage Range
		if (SceptreActualLevel == 12) damage = random(810,860); // +60 Damage Range
		if (SceptreActualLevel == 13) damage = random(875,925); // +65 Damage Range
		if (SceptreActualLevel == 14) damage = random(1015,1065); // +140 Damage Range
		if (SceptreActualLevel == 15) damage = random(1015,1065); // +0 Damage Range
		if (SceptreActualLevel >= 16) damage = random(1255,1305); // +240 Damage Range
		if (debugmelee) Console.Printf("BaseDmg: %d", damage);

		// [STRIFE] Stamina Upgrades
		int stamdamagefactor;
		previousdamage = damage;
		damage = (damage * (4 + stamdamagefactor) / 4);
		if (debugmelee) Console.Printf("StaminaDmg: %d, StamUpgrades: %d - (Previous Dmg: %d)", damage, stamdamagefactor, previousdamage);
		
		if (attacktype == 1) damage = damage * 5 / 2; // If performing the Aireal Attack
		if (attacktype == 2)
		{
			if (attacklevel < 0)
			{
				if (SceptreActualLevel <= 0) attacklevel = 0;
				if (SceptreActualLevel == 1) attacklevel = 0;
				if (SceptreActualLevel == 2) attacklevel = 0;
				if (SceptreActualLevel == 3) attacklevel = 0;
				if (SceptreActualLevel == 4) attacklevel = 0;
				if (SceptreActualLevel == 5) attacklevel = 1;
				if (SceptreActualLevel == 6) attacklevel = 1;
				if (SceptreActualLevel == 7) attacklevel = 1;
				if (SceptreActualLevel == 8) attacklevel = 1;
				if (SceptreActualLevel == 9) attacklevel = 1;
				if (SceptreActualLevel == 10) attacklevel = 2;
				if (SceptreActualLevel == 11) attacklevel = 2;
				if (SceptreActualLevel == 12) attacklevel = 2;
				if (SceptreActualLevel == 13) attacklevel = 2;
				if (SceptreActualLevel == 14) attacklevel = 2;
				if (SceptreActualLevel == 15) attacklevel = 3;
				if (SceptreActualLevel >= 16) attacklevel = 3;
			}
		
			if (attacklevel == 0) damage = damage / 2; // If performing the Spinning Attack [50%]
			else if (attacklevel == 1) damage = damage * 3 / 4; // If performing the Spinning Attack [75%]
			else if (attacklevel == 2) damage = damage * 7 / 8; // If performing the Spinning Attack [87.5%]
			else if (attacklevel == 3) damage = damage * 15 / 16; // If performing the Spinning Attack [93.25%]
		
			damage = damage / 4;
		}
		if (debugmelee) Console.Printf("BaseDmg: %d", damage);
		
		// Berserk Check
		previousdamage = damage;
		if (debugmelee) Console.Printf("BerserkDmg: %d - (Previous Dmg: %d)", damage, previousdamage);
		
		if (shockwave == 1) damage = damage / 6;
		if (debugmelee) Console.Printf("ShockWave: (%s) %d", weaponname, damage);
		
		// StamUp Check
		previousdamage = damage;
		int StamUpPerkLevel;
		int StamUpEXPerkLevel;
		if (StamUpPerkLevel > 0)
		{
			PerkFactor = ((StamUpPerkLevel * 30) + (StamUpEXPerkLevel * 75)) + 400;
			damage = damage * PerkFactor / 400;
		}

		if (debugmelee) Console.Printf("FinalMeleeDmg: (Weapon: %s - Source: %s) %d - (Previous Dmg: %d) [Sceptre]", weaponname, actorname, damage, previousdamage);
		finalmeleedamagedealt = damage;
		Console.Printf("finalmeleedamagedealt: %d", finalmeleedamagedealt);
	}

	//Controls the Timer for both Sceptre Twirl sprite animation and for when to make the swinging noise. [Flora Only]
	void A_SceptreTwirlFrameCheck(int FrameNo = 0)
	{
		int ManaDrainTimer;
		if (FrameNo == 0) // 0 resets the timer to 0
		{ 
			FrameCount = 0; 
		}
		else // FrameNo's value is the speed of the twirling
		{
			if (FrameNo > 16) FrameNo = 16;
			if (FrameNo < 1) FrameNo = 1;
			FrameCount += FrameNo;
			
			while (FrameCount < 1) { FrameCount += 32; } // Prevents Timer Underflow
			while (FrameCount > 32) { FrameCount -= 32; } // Prevents Timer Overflow
		}
		Console.Printf("FrameCount: %d, FrameNo: %d", FrameCount, FrameNo);
	}
}

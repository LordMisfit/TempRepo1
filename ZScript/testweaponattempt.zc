class TestPlayerPawn : DoomPlayer
{
	// Spreader Aura Level 1 Angles
	const spread1angle1 = -15.0;
	const spread1angle2 = 15.0;
	const spread1horz1 = 0.0;
	const spread1horz2 = 0.0;
	const spread1height1 = 0.0;
	const spread1height2 = 0.0;

	// Spreader Aura Level 2 Angles/Pitches
	const spread2angle1 = -7.5;
	const spread2angle2 = 7.5;
	const spread2horz1 = 0.0;
	const spread2horz2 = 0.0;
	const spread2pitch1 = -7.5;
	const spread2pitch2 = 7.5;
	const spread2height1 = 0.0;
	const spread2height2 = 0.0;

	int user_PlayerDVDSSpecial[256];
	int MeleeAtkRange;

	int jiggle_jump, jiggle_crouch, jiggle_left, jiggle_right, jiggle_up, jiggle_down;	int actortimer;
	int firsttic;
	int pbuddha1, pbuddha2, pgod1, pgod2, pnoclip1, pnoclip2;
	int breathdirection; // 0 = down [size decreases], 1 = up [size increases]
	int mobjdmg;
	int playoutputdmg;
	int playtookdamage;
	double basexscale, baseyscale;
	double scalexmulti, scaleymulti;
	double lastvelx;
	double lastvely;
	double lastvelz;
	int breathframe;
	
	int saveddamage;
	int InvisNeedleBonus;
	
	double PlayerDefenseIgnoreFactor, PlayerArmorIgnoreFactor, PlayerArmorIgnoreFactorGeneral;
	double neverbleeds, menufreezecheck;

	private class<Inventory> APPackToken, APPackCheck, MiscCheck;

	double TotalAirControl;
	default
	{
		Player.StartItem "TestWeapon";
		Player.WeaponSlot 1, "Fist", "Chainsaw", "TestWeapon";
	}
}

class BaseWeapon : Weapon 
{
	// Misc 
	const BerserkRecoilMulti = 2.5;
	const minxymoveneg = -3.814697266;
	const minxymovepos = 3.814697266;
	const minzmoveneg = -1.907348633;
	const minzmovepos = 1.907348633;

	// Spreader Aura Level 1 Angles
	const spread1angle1 = -15.0;
	const spread1angle2 = 15.0;
	const spread1horz1 = 0.0;
	const spread1horz2 = 0.0;
	const spread1height1 = 0.0;
	const spread1height2 = 0.0;

	// Spreader Aura Level 2 Angles/Pitches
	const spread2angle1 = -7.5;
	const spread2angle2 = 7.5;
	const spread2horz1 = 0.0;
	const spread2horz2 = 0.0;
	const spread2pitch1 = -7.5;
	const spread2pitch2 = 7.5;
	const spread2height1 = 0.0;
	const spread2height2 = 0.0;

	// FOR THE GZDoom Devs, these two vars below can be commented or uncommented without causing errors on loadup to test the issue.
	// If you comment out just one of them, using the normal attack will prevent the player's weapons from bobbing. 
	// If you comment out BOTH, if you then use the alt-fire of your weapon, you become unable to use walls/doors/lines and don't even make grunt noises.
	// ************************************
	int FrameValue;
	//int FrameValue2;
	// ************************************

	int FlameCount;
	int FrameCount;
	int SceptreTimer;
	int SceptreTimerLimit;
	int finaldamagedealt;
	int finaldamagedealt2;
	int finaldamagedealt3;
	int finaldamagedealt4;
	int finalmeleedamagedealt;
	int finalmeleedamagedealt2;
	int finalmeleedamagedealt3;
	int finalmeleedamagedealt4;
	string attackname1, attackname2, attackname3, attackname4, attackname5;

	private class<Inventory> APPackToken, APPackCheck, APPackCheck2, APPackCheck3, APPackCheck4, iDTech1Check, iDTech1Check2, iDTech1Check3, iDTech1Check4;

	void A_GetSceptreSwingRecoil(int attacktype = 0)
	{
		int dvds_sceptrerecoil = 1;
		if (dvds_sceptrerecoil)
		{
			int IsMoving = 0;
			if (vel.x < minxymoveneg || vel.x > minxymovepos) IsMoving++;
			if (vel.y < minxymoveneg || vel.y > minxymovepos) IsMoving++;
			if (vel.z < minzmoveneg || vel.z > minzmovepos) IsMoving++;

			if (IsMoving) { }
			else
			{
				let weapon = player.ReadyWeapon;
				string weaponname = weapon.GetClassName();
				string actorname = GetClassName();
				double recoil;
				double recoilmulti;
				int previousdamage;
				int strengthcounter;
				int sceptrestrbase;
				int sceptrestrmin;
				int sceptrestrmax;
				int PerkFactor;
				int SceptreActualLevel = CallACS("OtherVarCheckDECORATE",11);
				int CharacterClass = CallACS("CheckCharacterClass");
				int debugmelee;
				int PlayerLevel = CallACS("StatCheck",0);
				int PlayerAGL = CallACS("StatCheck",3);
				int PlayerSTR = CallACS("StatCheck",7);
				int MartialArtsMastery = CallACS("MiscVarCheckDECORATE",10035);
				int MartialArtsMasteryEX = CallACS("MiscVarCheckDECORATE",10036);
				int BerserkAdd;
				
				
				// Base "Recoil"
				BerserkAdd = 0;
				recoil = -0.3125 * (random(0,12) + BerserkAdd);
				if (attacktype == 1) recoil = -0.3125 * random(-6,6);
				if (debugmelee) Console.Printf("\cxRecoil [Base]: %8f", recoil);
				
				
				// MAM Perk Mitigation
				recoilmulti = (1.0 - (MartialArtsMastery * 0.125) - (MartialArtsMasteryEX * 0.3125));
				recoil *= recoilmulti;
				if (debugmelee) Console.Printf("\cxRecoil [MAM Perk]: %8f, Multiplier: %8f", recoil, recoilmulti);
				
				
				// Sceptre-Level Mitigation
				recoilmulti = (1.0 - (SceptreActualLevel * 0.0625));
				recoil *= recoilmulti;
				if (debugmelee) Console.Printf("\cxRecoil [SceptreLevel]: %8f, Multiplier: %8f", recoil, recoilmulti);
				
				
				// Stat/Level Mitigation
				recoilmulti = (1.0 - (PlayerLevel * 0.00078125) - (PlayerSTR * 0.000390625) - (PlayerAGL * 0.0015625));
				recoil *= recoilmulti;
				if (debugmelee) Console.Printf("\cxRecoil [Stats]: %8f, Multiplier: %8f", recoil, recoilmulti);
				
				
				// Random Chance for 0 recoil
				if (attacktype == 1) 
				{
					if (random(1,96) <= SceptreActualLevel) recoil = 0.0;
				}
				else
				{
					if (random(1,48) <= SceptreActualLevel || recoil >= 0.0) recoil = 0.0;
				}
				if (debugmelee) Console.Printf("\cxRecoil [Final]: %8f", recoil);

				A_Recoil(recoil);
			}
		}
	}

	void A_GetSceptreDamage(int attacktype = 0, int attacklevel = 0, int shockwave = 0)
	{
		let weapon = player.ReadyWeapon;
		string weaponname = weapon.GetClassName();
		string actorname = GetClassName();
		int damage;
		int previousdamage;
		int strengthcounter;
		int sceptrestrbase;
		int sceptrestrmin;
		int sceptrestrmax;
		int PerkFactor;
		int SceptreActualLevel;
		int CharacterClass;
		int debugmelee;
		
		if (SceptreActualLevel <= 0) damage = random(275,325); // Base Damage Range
		if (SceptreActualLevel == 1) damage = random(280,330); // +5 Damage Range
		if (SceptreActualLevel == 2) damage = random(290,340); // +10 Damage Range
		if (SceptreActualLevel == 3) damage = random(320,370); // +30 Damage Range
		if (SceptreActualLevel == 4) damage = random(340,390); // +20 Damage Range
		if (SceptreActualLevel == 5) damage = random(365,415); // +25 Damage Range
		if (SceptreActualLevel == 6) damage = random(425,475); // +60 Damage Range
		if (SceptreActualLevel == 7) damage = random(425,475); // +0 Damage Range
		if (SceptreActualLevel == 8) damage = random(545,595); // +120 Damage Range
		if (SceptreActualLevel == 9) damage = random(590,640); // +45 Damage Range
		if (SceptreActualLevel == 10) damage = random(640,690); // +50 Damage Range
		if (SceptreActualLevel == 11) damage = random(750,800); // +110 Damage Range
		if (SceptreActualLevel == 12) damage = random(810,860); // +60 Damage Range
		if (SceptreActualLevel == 13) damage = random(875,925); // +65 Damage Range
		if (SceptreActualLevel == 14) damage = random(1015,1065); // +140 Damage Range
		if (SceptreActualLevel == 15) damage = random(1015,1065); // +0 Damage Range
		if (SceptreActualLevel >= 16) damage = random(1255,1305); // +240 Damage Range
		if (debugmelee) Console.Printf("BaseDmg: %d", damage);

		// [STRIFE] Stamina Upgrades
		int stamdamagefactor;
		previousdamage = damage;
		damage = (damage * (4 + stamdamagefactor) / 4);
		if (debugmelee) Console.Printf("StaminaDmg: %d, StamUpgrades: %d - (Previous Dmg: %d)", damage, stamdamagefactor, previousdamage);
		
		// Strength Stat Check [7 pts = roughly double the character's base punch damage]
		int PlayerSTR;
		previousdamage = damage;
		for (strengthcounter = 0; strengthcounter < PlayerSTR; strengthcounter++)
		{
			sceptrestrbase = ((SceptreActualLevel * (4 + (PlayerSTR / 32))) + (16 + (SceptreActualLevel * (2 + (PlayerSTR / 64)))));
			sceptrestrmin = sceptrestrbase - (16 + (SceptreActualLevel * (2 + (PlayerSTR / 64))));
			sceptrestrmax = sceptrestrbase + (16 + (SceptreActualLevel * (2 + (PlayerSTR / 64)))); 

			if (debugmelee) Console.Printf("StrBase: %d, StrMin: %d, StrMax: %d", sceptrestrbase, sceptrestrmin, sceptrestrmax);

			damage += random(sceptrestrmin,sceptrestrmax);
		}
		if (debugmelee) Console.Printf("StrDmg: %d - (Strength: %d) - (Previous Dmg: %d)", damage, PlayerSTR, previousdamage);
		
		if (attacktype == 1) damage = damage * 5 / 2; // If performing the Aireal Attack
		if (attacktype == 2)
		{
			if (attacklevel < 0)
			{
				if (SceptreActualLevel <= 0) attacklevel = 0;
				if (SceptreActualLevel == 1) attacklevel = 0;
				if (SceptreActualLevel == 2) attacklevel = 0;
				if (SceptreActualLevel == 3) attacklevel = 0;
				if (SceptreActualLevel == 4) attacklevel = 0;
				if (SceptreActualLevel == 5) attacklevel = 1;
				if (SceptreActualLevel == 6) attacklevel = 1;
				if (SceptreActualLevel == 7) attacklevel = 1;
				if (SceptreActualLevel == 8) attacklevel = 1;
				if (SceptreActualLevel == 9) attacklevel = 1;
				if (SceptreActualLevel == 10) attacklevel = 2;
				if (SceptreActualLevel == 11) attacklevel = 2;
				if (SceptreActualLevel == 12) attacklevel = 2;
				if (SceptreActualLevel == 13) attacklevel = 2;
				if (SceptreActualLevel == 14) attacklevel = 2;
				if (SceptreActualLevel == 15) attacklevel = 3;
				if (SceptreActualLevel >= 16) attacklevel = 3;
			}
		
			if (attacklevel == 0) damage = damage / 2; // If performing the Spinning Attack [50%]
			else if (attacklevel == 1) damage = damage * 3 / 4; // If performing the Spinning Attack [75%]
			else if (attacklevel == 2) damage = damage * 7 / 8; // If performing the Spinning Attack [87.5%]
			else if (attacklevel == 3) damage = damage * 15 / 16; // If performing the Spinning Attack [93.25%]
		
			damage = damage / 4;
		}
		if (debugmelee) Console.Printf("BaseDmg: %d", damage);
		
		// Berserk Check
		previousdamage = damage;
		if (debugmelee) Console.Printf("BerserkDmg: %d - (Previous Dmg: %d)", damage, previousdamage);
		
		if (shockwave == 1) damage = damage / 6;
		if (debugmelee) Console.Printf("ShockWave: (%s) %d", weaponname, damage);
		
		// StamUp Check
		previousdamage = damage;
		int StamUpPerkLevel;
		int StamUpEXPerkLevel;
		if (StamUpPerkLevel > 0)
		{
			PerkFactor = ((StamUpPerkLevel * 30) + (StamUpEXPerkLevel * 75)) + 400;
			damage = damage * PerkFactor / 400;
		}

		if (debugmelee) Console.Printf("FinalMeleeDmg: (Weapon: %s - Source: %s) %d - (Previous Dmg: %d) [Sceptre]", weaponname, actorname, damage, previousdamage);
		finalmeleedamagedealt = damage;
		Console.Printf("finalmeleedamagedealt: %d", finalmeleedamagedealt);
	}

	// Sceptre Twirl Mana/MP Check [to "balance" sceptre alt-fire cheapness >.>]
	void A_SceptreTwirlManaCheck(int attacktype) 
	{
		int HaveMana, ManaCost;
		int SceptreActualLevel = CallACS("OtherVarCheckDECORATE",11);

		SceptreTimerLimit = 10;
		if (SceptreActualLevel == 0) SceptreTimerLimit = 10;
		if (SceptreActualLevel == 1) SceptreTimerLimit = 10;
		if (SceptreActualLevel == 2) SceptreTimerLimit = 11;
		if (SceptreActualLevel == 3) SceptreTimerLimit = 11;
		if (SceptreActualLevel == 4) SceptreTimerLimit = 12;
		if (SceptreActualLevel == 5) SceptreTimerLimit = 12;
		if (SceptreActualLevel == 6) SceptreTimerLimit = 13;
		if (SceptreActualLevel == 7) SceptreTimerLimit = 14;
		if (SceptreActualLevel == 8) SceptreTimerLimit = 14;
		if (SceptreActualLevel == 9) SceptreTimerLimit = 15;
		if (SceptreActualLevel == 10) SceptreTimerLimit = 16;
		if (SceptreActualLevel == 11) SceptreTimerLimit = 16;
		if (SceptreActualLevel == 12) SceptreTimerLimit = 17;
		if (SceptreActualLevel == 13) SceptreTimerLimit = 18;
		if (SceptreActualLevel == 14) SceptreTimerLimit = 19;
		if (SceptreActualLevel == 15) SceptreTimerLimit = 20;
		if (SceptreActualLevel == 16) SceptreTimerLimit = 22;
		
		int CurrentMana = CallACS("StatCheck",14); 
		if (attacktype == 1)
		{
			if (SceptreActualLevel <= 4 && CurrentMana >= 5) { CurrentMana -= 5; HaveMana++; }
			if (SceptreActualLevel > 4 && SceptreActualLevel <= 8 && CurrentMana >= 4 ) { CurrentMana -= 4; HaveMana++; }
			if (SceptreActualLevel > 8 && SceptreActualLevel <= 12 && CurrentMana >= 3 ) { CurrentMana -= 3; HaveMana++; }
			if (SceptreActualLevel > 12 && SceptreActualLevel <= 16 && CurrentMana >= 2 ) { CurrentMana -= 2; HaveMana++; }
			if (SceptreActualLevel == 16 && CurrentMana >= 1) { CurrentMana -= 1; HaveMana++; }
			if (CurrentMana < 0) CurrentMana = 0;
			CallACS("OtherVarSetDECORATE",2,CurrentMana);
			CallACS("MiscVarSetDECORATE",243,CurrentMana);
			CallACS("MiscVarSetDECORATE",238,CurrentMana);
		}
		else
		{
			if (CurrentMana > 0) HaveMana++;
			if (random(1,16) == 1) SceptreTimer += 2; else SceptreTimer += 1;

			if (SceptreTimer >= SceptreTimerLimit)
			{
				ManaCost = random(1,2);
				if (SceptreActualLevel < 8) CurrentMana -= 2;
				if (SceptreActualLevel > 8 && SceptreActualLevel < 16) CurrentMana -= ManaCost; HaveMana++;
				if (SceptreActualLevel == 16) CurrentMana -= 1; HaveMana++;
				if (CurrentMana < 0) CurrentMana = 0;

				CallACS("OtherVarSetDECORATE",2,CurrentMana);
				CallACS("MiscVarSetDECORATE",243,CurrentMana);
				CallACS("MiscVarSetDECORATE",238,CurrentMana);
				SceptreTimer = 0;
			}
		}
		
		//Console.Printf("SceptreTimer: %d / %d	", SceptreTimer, SceptreTimerLimit);
		//Console.Printf("HaveMana?: %d", HaveMana);
	}

	// Consumes a set amount of MP/MANA when called or checks for that much for an A_JumpIf call (for Heretic's Tome-fire modes)
	void A_UseManaAttack(int amount = 0, int check = 0, int infammocheck = 0, int musthaveammofirst = 0)
	{
		int CurrentMana = CallACS("StatCheck",14);
		int UseManaAttack;
		int breakcode;

		// Check 0 = Takes MP without a return value [i.e. infiniteammo is turned on].
		// Check 1 = Takes NO MP and gives a return value [for just checking]
		// Check 2 = Takes MP if applicable and gives a return value
		if (check > 0)
		{
			if (musthaveammofirst > 0)
			{
				if (CurrentMana >= amount) breakcode = 0; else breakcode = 1;
			}
			else breakcode = 0;

			if (breakcode <= 0)
			{
				if (infammocheck > 0 && (CountInv("PowerInfiniteAmmo", AAPTR_PLAYER1) > 0))
				{
					UseManaAttack = 1;
				}
				else
				{
					if (CurrentMana >= amount) 
					{
						if (check > 1)
						{
							CurrentMana -= amount;
							if (CurrentMana < 1) CurrentMana = 0;
							CallACS("OtherVarSetDECORATE",2,CurrentMana);
							CallACS("MiscVarSetDECORATE",243,CurrentMana);
							CallACS("MiscVarSetDECORATE",238,CurrentMana);
						}
						UseManaAttack = 1;
					}
					else 
					{
						UseManaAttack = 0;
					}
				}
			}
			else
			{
				UseManaAttack = 0;
			}
		}
		else
		{
			CurrentMana -= amount;
			if (CurrentMana < 1) CurrentMana = 0;
			CallACS("OtherVarSetDECORATE",2,CurrentMana);
			CallACS("MiscVarSetDECORATE",243,CurrentMana);
			CallACS("MiscVarSetDECORATE",238,CurrentMana);
		}
		//Console.Printf("UseManaAttack?: %d (%d)", UseManaAttack, amount);
	}
	
	// Consumes a set amount of Stamina when called [1 = 0.01% stamina consumed, etc] or checks for that much for an A_JumpIf call
	void A_UseStaminaAttack(int amount = 0, int check = 0)
	{
		int stamusedebug;
		int powertripmode;
		int DQOomphTimer = CallACS("GetBuffTimer",10);
		int DQBuffTimer = CallACS("GetBuffTimer",11);
		int DQAcceleratleTimer = CallACS("GetBuffTimer",12);
		int DQBluntTimer = CallACS("GetBuffTimer",13);
		int DQSapTimer = CallACS("GetBuffTimer",14);
		int DQDeceleratleTimer = CallACS("GetBuffTimer",15);

		if (powertripmode == 1) amount = amount / 5;
		if (powertripmode == 2) amount = amount / 10;
		if (DQOomphTimer > 0) amount = amount * 4 / 5; // Oomph [80% consumption]
		if (DQBuffTimer > 0) amount = amount * 4 / 5; // Buff [80% consumption]
		if (DQAcceleratleTimer > 0) amount = amount * 4 / 5; // Acceleratle [80% consumption]
		if (DQBluntTimer > 0) amount = amount * 6 / 5; // Blunt [120% consumption]
		if (DQSapTimer > 0) amount = amount * 6 / 5; // Sap [120% consumption]
		if (DQDeceleratleTimer > 0) amount = amount * 6 / 5; // Deceleratle [120% consumption]
		if (CallACS("MiscVarCheckDECORATE",9043) > 0) 
		{
			if (CallACS("MiscVarCheckDECORATE",9043) <= 1) amount = amount / 2; // Death Rage [50% consumption]
			if (CallACS("MiscVarCheckDECORATE",9043) == 2) amount = amount / 4; // Death Rage [25% consumption]
			if (CallACS("MiscVarCheckDECORATE",9043) >= 3) amount = amount / 8; // Death Rage [12.5% consumption]
		}
		
		int whole = amount / 100; 
		int modulus = amount % 100;
		if (stamusedebug)
		{
			if (modulus > -1 && modulus < 10) Console.Printf("Stamina Used: %d.0%d%",whole, modulus);
																	 else Console.Printf("Stamina Used: %d.%d%",whole, modulus);
		}
		
		int CurrentStamina = CallACS("MiscVarCheckDECORATE",21);
		if (check > 0)
		{
			if (CurrentStamina >= amount) 
			{
				if (check > 1)
				{
					CurrentStamina -= amount;
					if (CurrentStamina < 1) CurrentStamina = 0;
					CallACS("MiscVarSetDECORATE",21,CurrentStamina);
				}
				if (stamusedebug) Console.Printf("Stamina to be Used: Yes");
			}
			else 
			{ 
				if (stamusedebug) Console.Printf("Stamina to be Used: No");
			}
		}
		else
		{
			CurrentStamina -= amount;
			if (CurrentStamina < 1) CurrentStamina = 0;
			CallACS("MiscVarSetDECORATE",21,CurrentStamina);
		}
	}
	
	void A_GetSceptreStaminaUse(int attacktype = 0)
	{
		int CharacterClass = CallACS("CheckCharacterClass");
		int stamusedebug;
		int MartialArtsMastery = CallACS("MiscVarCheckDECORATE",10035);
		int MartialArtsMasteryEX = CallACS("MiscVarCheckDECORATE",10036);
		int BerserkerFit = CallACS("MiscVarCheckDECORATE",10051);
		int BerserkerFitEX = CallACS("MiscVarCheckDECORATE",10052);
		int DQOomphTimer = CallACS("GetBuffTimer",10);
		int BerserkTimer = CallACS("GetBuffTimer",23);
		int SceptreActualLevel = CallACS("OtherVarCheckDECORATE",11);
		int stamuse;
		if (attacktype == 0) // Normal Swing
		{
			if (SceptreActualLevel <= 0) stamuse = 575;
			if (SceptreActualLevel == 1) stamuse = 568; // -7
			if (SceptreActualLevel == 2) stamuse = 561; // -7
			if (SceptreActualLevel == 3) stamuse = 554; // -7
			if (SceptreActualLevel == 4) stamuse = 546; // -8
			if (SceptreActualLevel == 5) stamuse = 538; // -8
			if (SceptreActualLevel == 6) stamuse = 530; // -8
			if (SceptreActualLevel == 7) stamuse = 521; // -9
			if (SceptreActualLevel == 8) stamuse = 512; // -9
			if (SceptreActualLevel == 9) stamuse = 503; // -9
			if (SceptreActualLevel == 10) stamuse = 493; // -10
			if (SceptreActualLevel == 11) stamuse = 483; // -10
			if (SceptreActualLevel == 12) stamuse = 473; // -10
			if (SceptreActualLevel == 13) stamuse = 462; // -11
			if (SceptreActualLevel == 14) stamuse = 451; // -11
			if (SceptreActualLevel == 15) stamuse = 440; // -11
			if (SceptreActualLevel >= 16) stamuse = 428; // -12
		}
		else
		if (attacktype == 1) // Aireal Attack
		{
			if (SceptreActualLevel <= 0) stamuse = 575;
			if (SceptreActualLevel == 1) stamuse = 568; // -7
			if (SceptreActualLevel == 2) stamuse = 561; // -7
			if (SceptreActualLevel == 3) stamuse = 554; // -7
			if (SceptreActualLevel == 4) stamuse = 546; // -8
			if (SceptreActualLevel == 5) stamuse = 538; // -8
			if (SceptreActualLevel == 6) stamuse = 530; // -8
			if (SceptreActualLevel == 7) stamuse = 521; // -9
			if (SceptreActualLevel == 8) stamuse = 512; // -9
			if (SceptreActualLevel == 9) stamuse = 503; // -9
			if (SceptreActualLevel == 10) stamuse = 493; // -10
			if (SceptreActualLevel == 11) stamuse = 483; // -10
			if (SceptreActualLevel == 12) stamuse = 473; // -10
			if (SceptreActualLevel == 13) stamuse = 462; // -11
			if (SceptreActualLevel == 14) stamuse = 451; // -11
			if (SceptreActualLevel == 15) stamuse = 440; // -11
			if (SceptreActualLevel >= 16) stamuse = 428; // -12
		}
		else
		if (attacktype == 2) // Spinning Attack
		{
			if (SceptreActualLevel <= 0) stamuse = 1005;
			if (SceptreActualLevel == 1) stamuse = 996;
			if (SceptreActualLevel == 2) stamuse = 987;
			if (SceptreActualLevel == 3) stamuse = 978;
			if (SceptreActualLevel == 4) stamuse = 969;
			if (SceptreActualLevel == 5) stamuse = 960;
			if (SceptreActualLevel == 6) stamuse = 951;
			if (SceptreActualLevel == 7) stamuse = 942;
			if (SceptreActualLevel == 8) stamuse = 933;
			if (SceptreActualLevel == 9) stamuse = 924;
			if (SceptreActualLevel == 10) stamuse = 915;
			if (SceptreActualLevel == 11) stamuse = 903;
			if (SceptreActualLevel == 12) stamuse = 891;
			if (SceptreActualLevel == 13) stamuse = 879;
			if (SceptreActualLevel == 14) stamuse = 867;  
			if (SceptreActualLevel == 15) stamuse = 855;
			if (SceptreActualLevel >= 16) stamuse = 840;
		}
		int whole = stamuse / 100; 
		int modulus = stamuse % 100;
		if (stamusedebug)
		{
			if (modulus > -1 && modulus < 10) Console.Printf("Stamina Used [Base]: %d.0%d%",whole, modulus);
																	 else Console.Printf("Stamina Used [Base]: %d.%d%",whole, modulus);
		}

		if (DQOomphTimer > 0) stamuse = stamuse * 19 / 20; // Oomph
		if (BerserkTimer > 0) stamuse = stamuse * 7 / 8; // Berserk
		whole = stamuse / 100; 
		modulus = stamuse % 100;
		if (stamusedebug)
		{
			if (modulus > -1 && modulus < 10) Console.Printf("Stamina Used [Oomph/Berserk]: %d.0%d%",whole, modulus);
																	 else Console.Printf("Stamina Used [Oomph/Berserk]: %d.%d%",whole, modulus);
		}
	}

	void A_GetSceptreRange(int attacktype = 0)
	{
		int range;
		int baserange;
		let weapon = player.ReadyWeapon;
		string weaponname = weapon.GetClassName();
		string actorname = GetClassName();
		int CharacterClass = CallACS("CheckCharacterClass");
		int ClassicDoomType = CallACS("OtherVarCheckDECORATE",7);
		int SceptreActualLevel = CallACS("OtherVarCheckDECORATE",11);
		int MartialArtsMastery = CallACS("MiscVarCheckDECORATE",10035);
		int MartialArtsMasteryEX = CallACS("MiscVarCheckDECORATE",10036);
		int BerserkerFit = CallACS("MiscVarCheckDECORATE",10051);
		int BerserkerFitEX = CallACS("MiscVarCheckDECORATE",10052);
		int debugmelee;

		if (attacktype == 0) // Normal Swing
		{
			if (SceptreActualLevel <= 0) range = 104;
			if (SceptreActualLevel == 1) range = 106; // +2
			if (SceptreActualLevel == 2) range = 108; // +2
			if (SceptreActualLevel == 3) range = 110; // +2
			if (SceptreActualLevel == 4) range = 112; // +2
			if (SceptreActualLevel == 5) range = 116; // +4
			if (SceptreActualLevel == 6) range = 118; // +2
			if (SceptreActualLevel == 7) range = 122; // +4
			if (SceptreActualLevel == 8) range = 128; // +6
			if (SceptreActualLevel == 9) range = 132; // +2
			if (SceptreActualLevel == 10) range = 134; // +2
			if (SceptreActualLevel == 11) range = 136; // +2
			if (SceptreActualLevel == 12) range = 138; // +2
			if (SceptreActualLevel == 13) range = 142; // +4
			if (SceptreActualLevel == 14) range = 144; // +2
			if (SceptreActualLevel == 15) range = 148; // +4
			if (SceptreActualLevel >= 16) range = 154; // +6
			range = range * 5 / 4;
		}
		else
		if (attacktype == 1) // Aireal Attack
		{
			if (SceptreActualLevel <= 0) range = 104;
			if (SceptreActualLevel == 1) range = 106; // +2
			if (SceptreActualLevel == 2) range = 108; // +2
			if (SceptreActualLevel == 3) range = 110; // +2
			if (SceptreActualLevel == 4) range = 112; // +2
			if (SceptreActualLevel == 5) range = 116; // +4
			if (SceptreActualLevel == 6) range = 118; // +2
			if (SceptreActualLevel == 7) range = 122; // +4
			if (SceptreActualLevel == 8) range = 128; // +6
			if (SceptreActualLevel == 9) range = 132; // +2
			if (SceptreActualLevel == 10) range = 134; // +2
			if (SceptreActualLevel == 11) range = 136; // +2
			if (SceptreActualLevel == 12) range = 138; // +2
			if (SceptreActualLevel == 13) range = 142; // +4
			if (SceptreActualLevel == 14) range = 144; // +2
			if (SceptreActualLevel == 15) range = 148; // +4
			if (SceptreActualLevel >= 16) range = 154; // +6
			range = range * 5 / 4;
		}
		else
		if (attacktype == 2) // Spinning Attack
		{
			if (SceptreActualLevel <= 0) range = 168;
			if (SceptreActualLevel == 1) range = 173; // +5
			if (SceptreActualLevel == 2) range = 178; // +5
			if (SceptreActualLevel == 3) range = 182; // +4
			if (SceptreActualLevel == 4) range = 187; // +5
			if (SceptreActualLevel == 5) range = 196; // +9
			if (SceptreActualLevel == 6) range = 201; // +5
			if (SceptreActualLevel == 7) range = 209; // +8
			if (SceptreActualLevel == 8) range = 222; // +13
			if (SceptreActualLevel == 9) range = 230; // +8
			if (SceptreActualLevel == 10) range = 236; // +6
			if (SceptreActualLevel == 11) range = 241; // +5
			if (SceptreActualLevel == 12) range = 247; // +6
			if (SceptreActualLevel == 13) range = 256; // +9
			if (SceptreActualLevel == 14) range = 262; // +6
			if (SceptreActualLevel == 15) range = 271; // +9
			if (SceptreActualLevel >= 16) range = 288; // +17
			range = range * 5 / 4;
		}
		baserange = range;
		if (ClassicDoomType == 5) range = range * 6 / 5; // 1.2x in Doom64 due to scaling up of general maps, etc :V
		if (debugmelee) Console.Printf("\cwMeleeRange: (SAttackType: %d) %d - (Base Range: %d)\c-", attacktype, range, baserange);
	}
	
	void A_SceptreDvAvSwing()
	{
		if (CallACS("GetBuffTimer",7) > 0) { A_SetTics(0); }
	}
	
	void A_SceptreSwingShield()
	{
		A_GetSceptreRange(0);
		int baseRange;
		let sceptrelevel = CallACS("OtherVarCheckDECORATE",11);
		string reflpiece; string blckpiece;
		if (sceptrelevel >= 0 && sceptrelevel <= 4) { reflpiece = "ShieldSpawnerSwingAttack1D"; blckpiece = "ShieldSpawnerSwingAttack1"; }
		if (sceptrelevel >= 5 && sceptrelevel <= 9) { reflpiece = "ShieldSpawnerSwingAttack2D"; blckpiece = "ShieldSpawnerSwingAttack2"; }
		if (sceptrelevel >= 10 && sceptrelevel <= 13) { reflpiece = "ShieldSpawnerSwingAttack3D"; blckpiece = "ShieldSpawnerSwingAttack3"; }
		if (sceptrelevel >= 14 && sceptrelevel <= 16) { reflpiece = "ShieldSpawnerSwingAttack4D"; blckpiece = "ShieldSpawnerSwingAttack4"; }
		int maxpieces = baseRange / 32;
		for (let piece = 0; piece < maxpieces; piece++)
		{
			A_SpawnItemEx(
					piece == 0? reflpiece : blckpiece,
					(cos(-pitch) * CallACS("SetShieldPieceDist", baseRange - (piece * 32))), // xpos
					0, // ypos
					(sin(-pitch) * CallACS("SetShieldPieceDist", baseRange - (piece * 32))), // zpos
					0, // xvel
					0, // yvel
					0, // zvel
					0, // angle
					SXF_NOCHECKPOSITION, // Flags
					0, // FailChance
					0 // TID
			);
		}
	}
	
	void A_SceptreAltFireShield()
	{
		int xpos;
		int ypos;
		int zpos;
		int spawnchance = 1 - (CallACS("OtherVarCheckDECORATE",11) / 8);
		string shldpiece;
		string shldpiece2;
		if (random(1,256) > spawnchance)
		{
			// 6 [No]
			xpos = 32; ypos = 0;
			shldpiece = "ShieldPartNoReflect";
			A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",-8) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",8) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",24) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",40) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",56) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",72) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			// 5 [No]
			xpos = 24; ypos = 16;
			A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",0) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",16) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",32) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",48) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",64) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			// 5 [No]
			xpos = 24; ypos = -16;
			A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",0) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",16) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",32) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",48) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",64) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			// 4 [No]
			xpos = 11; ypos = 32;
			A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",8) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",24) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",40) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",56) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			// 4 [No]
			xpos = 11; ypos = -32;
			A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",8) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",24) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",40) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",56) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			
			spawnchance = 3 - ((CallACS("OtherVarCheckDECORATE",11) * 2) / 3);
			if (random(1,256) > spawnchance)
			{
				// 6 [No]
				xpos = 40; ypos = 0;
				shldpiece = "ShieldPartNoReflect";
				A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",-8) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",8) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",24) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",40) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",56) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",72) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				// 5 [No]
				xpos = 32; ypos = 16;
				A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",0) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",16) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",32) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",48) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",64) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				// 5 [No]
				xpos = 32; ypos = -16;
				A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",0) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",16) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",32) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",48) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",64) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				// 4 [No]
				xpos = 21; ypos = 32;
				A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",8) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",24) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",40) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",56) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				// 4 [No]
				xpos = 21; ypos = -32;
				A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",8) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",24) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",40) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",56) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				
				
				spawnchance = 10 - ((CallACS("OtherVarCheckDECORATE",11) * 16) / 5);
				if (random(1,256) > spawnchance)
				{
					// 6 [Yes]
					xpos = 48; ypos = 0;
					shldpiece2 = "ShieldPart";
					A_SpawnItemEx(shldpiece2, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",-8) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx(shldpiece2, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",8) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx(shldpiece2, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",24) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx(shldpiece2, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",40) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx(shldpiece2, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",56) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx(shldpiece2, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",72) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					// 5 [Yes]
					xpos = 40; ypos = 16;
					A_SpawnItemEx(shldpiece2, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",0) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx(shldpiece2, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",16) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx(shldpiece2, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",32) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx(shldpiece2, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",48) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx(shldpiece2, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",64) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					// 5 [Yes]
					xpos = 40; ypos = -16;
					A_SpawnItemEx(shldpiece2, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",0) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx(shldpiece2, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",16) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx(shldpiece2, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",32) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx(shldpiece2, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",48) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx(shldpiece2, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",64) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					// 4 [Yes]
					xpos = 29; ypos = 32;
					A_SpawnItemEx(shldpiece2, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",8) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx(shldpiece2, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",24) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx(shldpiece2, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",40) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx(shldpiece2, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",56) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					// 4 [Yes]
					xpos = 29; ypos = -32;
					A_SpawnItemEx(shldpiece2, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",8) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx(shldpiece2, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",24) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx(shldpiece2, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",40) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx(shldpiece2, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",56) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					
					
					spawnchance = 30 - ((CallACS("OtherVarCheckDECORATE",11) * 18) / 2);
					if (random(1,256) > spawnchance)
					{
						// 3 [No]
						xpos = 2; ypos = 40;
						shldpiece = "ShieldPartNoReflect";
						A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",16) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",32) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",48) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						// 3 [No]
						xpos = 2; ypos = -40;
						A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",16) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",32) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",48) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						// 3 [No]
						xpos = 7; ypos = 40;
						A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",16) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",32) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",48) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						// 3 [No]
						xpos = 7; ypos = -40;
						A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",16) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",32) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						A_SpawnItemEx(shldpiece, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",48) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						// 3 [Yes]
						xpos = 24; ypos = 40;
						shldpiece2 = "ShieldPart";
						A_SpawnItemEx(shldpiece2, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",16) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						A_SpawnItemEx(shldpiece2, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",32) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						A_SpawnItemEx(shldpiece2, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",48) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						// 3 [Yes]
						xpos = 24; ypos = -40;
						A_SpawnItemEx(shldpiece2, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",16) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						A_SpawnItemEx(shldpiece2, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",32) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						A_SpawnItemEx(shldpiece2, cos(-pitch) * CallACS("SetShieldPieceDist",xpos), ypos, CallACS("SetShieldPieceDist",48) + (sin(-pitch) * CallACS("SetShieldPieceDist",xpos)), 0, 0, 0, 0, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						
						
						
					}
				}
			}
		}
	}
	
	void A_SceptreSpinningShield()
	{
		A_GetSceptreRange(2);
		int baseRange;
		int sceptrelevel = CallACS("OtherVarCheckDECORATE",11);
		string reflpiece; string blckpiece;
		if (sceptrelevel >= 0 && sceptrelevel <= 8) { reflpiece = "ShieldSpawnerSpinAttack1D"; blckpiece = "ShieldSpawnerSpinAttack1"; }
		if (sceptrelevel >= 9 && sceptrelevel <= 16) { reflpiece = "ShieldSpawnerSpinAttack2D"; blckpiece = "ShieldSpawnerSpinAttack2"; }
		int maxpieces = baseRange / 32;
		for (let piece = 0; piece < maxpieces; piece++)
		{
			A_SpawnItemEx(
					piece == 0? reflpiece : blckpiece,
					(cos(-pitch) * CallACS("SetShieldPieceDist", baseRange - (piece * 32))), // xpos
					0, // ypos
					(sin(-pitch) * CallACS("SetShieldPieceDist", baseRange - (piece * 32))), // zpos
					0, // xvel
					0, // yvel
					0, // zvel
					0, // angle
					SXF_NOCHECKPOSITION, // Flags
					0, // FailChance
					0 // TID
			);
		}
	}
	
	void A_SceptreShieldOff()
	{
		string shldpiece;
		shldpiece = "ShieldDefense"; A_SetInventory(shldpiece,0); 
		shldpiece = "ShieldDefense2"; A_SetInventory(shldpiece,0); 
		shldpiece = "ShieldDefense3"; A_SetInventory(shldpiece,0);
	}
	
	void A_SceptreShield1()
	{
		string shldpiece;
		shldpiece = "ShieldDefense"; A_SetInventory(shldpiece,1); 
		shldpiece = "ShieldDefense2"; A_SetInventory(shldpiece,0); 
		shldpiece = "ShieldDefense3"; A_SetInventory(shldpiece,0);
	}
	
	void A_SceptreShield2()
	{
		string shldpiece;
		shldpiece = "ShieldDefense"; A_SetInventory(shldpiece,0); 
		shldpiece = "ShieldDefense2"; A_SetInventory(shldpiece,1); 
		shldpiece = "ShieldDefense3"; A_SetInventory(shldpiece,0);
	}
	
	void A_SceptreShield3()
	{
		string shldpiece;
		shldpiece = "ShieldDefense"; A_SetInventory(shldpiece,0); 
		shldpiece = "ShieldDefense2"; A_SetInventory(shldpiece,0); 
		shldpiece = "ShieldDefense3"; A_SetInventory(shldpiece,1);
	}
	
	// Spread Aura Function [Melee Punch]
	void A_SpreadAuraCustomPunch (int damage, bool norandom = 0, int flags = 0, string pufftype = "", float range = 0.0, float lifesteal = 0.0, int lifestealmax = 0, string armorbonustype = "", sound meleesound = "", sound misssound = "") 
	{
		string spreadcheck, spreadcheck2;
		spreadcheck = "SpreaderAura2";
		spreadcheck2 = "SpreaderAura1";
		if (CountInv(spreadcheck) > 0)
		{
			// Angle + 15, Pitch + 0
			A_SetAngle(angle+spread1angle2);
			A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
			// Angle + 7.5, Pitch + 7.5
			A_SetAngle(angle-spread2angle2); A_SetPitch(pitch+spread2pitch2);
			A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
			// Angle + 7.5, Pitch - 7.5
			A_SetPitch(pitch-spread1angle2); 
			A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
			// Angle + 0, Pitch + 0
			A_SetPitch(pitch+spread2pitch2); A_SetAngle(angle-spread2angle2);
			A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
			// Angle - 7.5, Pitch - 7.5
			A_SetAngle(angle-spread2angle2); A_SetPitch(pitch-spread2pitch2);
			A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
			// Angle - 7.5, Pitch + 7.5
			A_SetPitch(pitch+spread1angle2);
			A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
			// Angle - 15, Pitch + 0
			A_SetPitch(pitch-spread2pitch2); A_SetAngle(angle-spread2angle2);
			A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
			// Reset
			A_SetAngle(angle+spread1angle2);
		}
		else
		if (CountInv(spreadcheck2) > 0)
		{
			A_SetAngle(angle+spread1angle2);
			A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
			A_SetAngle(angle-spread1angle2);
			A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
			A_SetAngle(angle-spread1angle2);
			A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
			A_SetAngle(angle+spread1angle2);
		}
		else
		{
			A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
		}
	}

	// Spread Aura Function [Hitscan]
	void A_SpreadAuraFireBullets (double spread_horz, double spread_vert, int numbullets, int damage, string pufftype = "", int flags = 0, int flagscenter = 0, float range = 8192, string missile = "", float spawnheight = 0.0, float spawnofs_xy = 0.0, int ammouseamount = 0, string ammousetype = "")
	{
		int user_pelletsfired;
		string spreadcheck, spreadcheck2;
		spreadcheck = "SpreaderAura2";
		spreadcheck2 = "SpreaderAura1";
		if (CountInv(spreadcheck) > 0)
		{
			// Angle + 15, Pitch + 0
			A_SetAngle(angle+spread1angle2);
			A_FireBullets (spread_horz,spread_vert,numbullets,damage,pufftype,   flags   ,range,missile,spawnheight,spawnofs_xy);
			// Angle + 7.5, Pitch + 7.5
			A_SetAngle(angle-spread2angle2); A_SetPitch(pitch+spread2pitch2);
			A_FireBullets (spread_horz,spread_vert,numbullets,damage,pufftype,   flags   ,range,missile,spawnheight,spawnofs_xy);
			// Angle + 7.5, Pitch - 7.5
			A_SetPitch(pitch-spread1angle2); 
			A_FireBullets (spread_horz,spread_vert,numbullets,damage,pufftype,   flags   ,range,missile,spawnheight,spawnofs_xy);
			// Angle + 0, Pitch + 0
			A_SetPitch(pitch+spread2pitch2); A_SetAngle(angle-spread2angle2);
			A_FireBullets (spread_horz,spread_vert,numbullets,damage,pufftype,flagscenter,range,missile,spawnheight,spawnofs_xy);
			// Angle - 7.5, Pitch - 7.5
			A_SetAngle(angle-spread2angle2); A_SetPitch(pitch-spread2pitch2);
			A_FireBullets (spread_horz,spread_vert,numbullets,damage,pufftype,   flags   ,range,missile,spawnheight,spawnofs_xy);
			// Angle - 7.5, Pitch + 7.5
			A_SetPitch(pitch+spread1angle2);
			A_FireBullets (spread_horz,spread_vert,numbullets,damage,pufftype,   flags   ,range,missile,spawnheight,spawnofs_xy);
			// Angle - 15, Pitch + 0
			A_SetPitch(pitch-spread2pitch2); A_SetAngle(angle-spread2angle2);
			A_FireBullets (spread_horz,spread_vert,numbullets,damage,pufftype,   flags   ,range,missile,spawnheight,spawnofs_xy);
			// Reset
			A_SetAngle(angle+spread1angle2);
		}
		else
		if (CountInv(spreadcheck2) > 0)
		{
			A_SetAngle(angle+spread1angle2);
			A_FireBullets (spread_horz,spread_vert,numbullets,damage,pufftype,   flags   ,range,missile,spawnheight,spawnofs_xy);
			A_SetAngle(angle-spread1angle2);
			A_FireBullets (spread_horz,spread_vert,numbullets,damage,pufftype,flagscenter,range,missile,spawnheight,spawnofs_xy);
			A_SetAngle(angle-spread1angle2);
			A_FireBullets (spread_horz,spread_vert,numbullets,damage,pufftype,   flags   ,range,missile,spawnheight,spawnofs_xy);
			A_SetAngle(angle+spread1angle2);
		}
		else
		{
			A_FireBullets (spread_horz,spread_vert,numbullets,damage,pufftype,flagscenter,range,missile,spawnheight,spawnofs_xy);
		}
		A_TakeInventory(ammousetype,ammouseamount,TIF_NOTAKEINFINITE,AAPTR_DEFAULT);
	}

	// Allows the player to hold an arrow in the Diaris Longbow or unprime it to avoid wasting ammo.
	// Allows you to hold back the sceptre if holding down the primary fire to time a swing. :V
	int A_HoldInWeapon(int type = 0)
	{
		int buttons;
		int miscresult;

		if (CallACS("MiscVarCheckDECORATE",2500) != 0 || CallACS("GetBuffTimer",20) > 0) { }
		else
		{
			buttons = GetPlayerInput(INPUT_BUTTONS); 
			if (buttons & BT_ALTATTACK) miscresult = 1; // SetResultValue(1);
			else if (buttons & BT_ATTACK) miscresult = 2; // SetResultValue(2);
			else miscresult = 0; // SetResultValue(0);
		}
		return miscresult;
	}

	//Controls the Timer for both Sceptre Twirl sprite animation and for when to make the swinging noise. [Flora Only]
	void A_SceptreTwirlFrameCheck(int FrameNo = 0)
	{
		int ManaDrainTimer;
		if (FrameNo == 0) // 0 resets the timer to 0
		{ 
			FrameCount = 0; 
		}
		else // FrameNo's value is the speed of the twirling
		{
			if (FrameNo > 16) FrameNo = 16;
			if (FrameNo < 1) FrameNo = 1;
			FrameCount += FrameNo;
		
			while (FrameCount < 1) { FrameCount += 32; } // Prevents Timer Underflow
			while (FrameCount > 32) { FrameCount -= 32; } // Prevents Timer Overflow
		}
		//Console.Printf("FrameCount: %d, FrameNo: %d", FrameCount, FrameNo);
	}
	
	void A_SceptreTwirlVisualFrames(int VisualSet = 0)
	{
		string vispart;
		if (VisualSet == 0)
		{
			if (FrameCount >= 1 && FrameCount <= 4) { vispart = "SceptrePartVisual1"; }
			else if (FrameCount >= 5 && FrameCount <= 8) { vispart = "SceptrePartVisual2"; }
			else if (FrameCount >= 9 && FrameCount <= 12) { vispart = "SceptrePartVisual3"; }
			else if (FrameCount >= 13 && FrameCount <= 16) { vispart = "SceptrePartVisual4"; }
			else if (FrameCount >= 17 && FrameCount <= 20) { A_PlaySound("SceptreTwirl1",CHAN_WEAPON); vispart = "SceptrePartVisual5"; }
			else if (FrameCount >= 21 && FrameCount <= 24) { vispart = "SceptrePartVisual6"; }
			else if (FrameCount >= 25 && FrameCount <= 28) { vispart = "SceptrePartVisual7"; }
			else if (FrameCount >= 29 && FrameCount <= 32) { vispart = "SceptrePartVisual8"; }
			A_SpawnItemEx(vispart, cos(-pitch) * CallACS("SetShieldPieceDist",44), 0, CallACS("SetShieldPieceDist",32) + (sin(-pitch) * CallACS("SetShieldPieceDist",44)), 0, 0, 0, 0, 0);
		}
		else
		if (VisualSet == 1)
		{
			if (FrameCount >= 1 && FrameCount <= 4) { vispart = "SceptrePartVisual1b"; }
			else if (FrameCount >= 5 && FrameCount <= 8) { vispart = "SceptrePartVisual2b"; }
			else if (FrameCount >= 9 && FrameCount <= 12) { vispart = "SceptrePartVisual3b"; }
			else if (FrameCount >= 13 && FrameCount <= 16) { vispart = "SceptrePartVisual4b"; }
			else if (FrameCount >= 17 && FrameCount <= 20) { A_PlaySound("SceptreTwirl2",CHAN_WEAPON); vispart = "SceptrePartVisual5b"; }
			else if (FrameCount >= 21 && FrameCount <= 24) { vispart = "SceptrePartVisual6b"; }
			else if (FrameCount >= 25 && FrameCount <= 28) { vispart = "SceptrePartVisual7b"; }
			else if (FrameCount >= 29 && FrameCount <= 32) { vispart = "SceptrePartVisual8b"; }
			A_SpawnItemEx(vispart, cos(-pitch) * CallACS("SetShieldPieceDist",44), 0, CallACS("SetShieldPieceDist",32) + (sin(-pitch) * CallACS("SetShieldPieceDist",44)), 0, 0, 0, 0, 0);
		}
		else
		if (VisualSet == 2)
		{
			if (FrameCount >= 1 && FrameCount <= 4) { vispart = "SceptrePartVisual1b"; }
			else if (FrameCount >= 5 && FrameCount <= 8) { vispart = "SceptrePartVisual2b"; }
			else if (FrameCount >= 9 && FrameCount <= 12) { vispart = "SceptrePartVisual3b"; }
			else if (FrameCount >= 13 && FrameCount <= 16) { vispart = "SceptrePartVisual4b"; }
			else if (FrameCount >= 17 && FrameCount <= 20) { A_PlaySound("SceptreTwirl3",CHAN_WEAPON); vispart = "SceptrePartVisual5b"; }
			else if (FrameCount >= 21 && FrameCount <= 24) { vispart = "SceptrePartVisual6b"; }
			else if (FrameCount >= 25 && FrameCount <= 28) { vispart = "SceptrePartVisual7b"; }
			else if (FrameCount >= 29 && FrameCount <= 32) { vispart = "SceptrePartVisual8b"; }
			A_SpawnItemEx(vispart, cos(-pitch) * CallACS("SetShieldPieceDist",44), 0, CallACS("SetShieldPieceDist",32) + (sin(-pitch) * CallACS("SetShieldPieceDist",44)), 0, 0, 0, 0, 0);
		}
	}
	
	// Check if to perform Sceptre's downswing alternate attack while falling or it's spinning alternate while grounded.
	int A_CheckSceptreAltFire()
	{
		if (CallACS("MiscVarCheckDECORATE",2500) != 0 || CallACS("GetBuffTimer",20) > 0) return -1;
		int buttons = GetPlayerInput(INPUT_BUTTONS);
		int PlayerLevel = CallACS("StatCheck",0);
		int SceptreActualLevel = CallACS("OtherVarCheckDECORATE",11);
		int result;
		
		if (vel.z < 0)
		{
			if (buttons & BT_JUMP && PlayerLevel >= 13 && SceptreActualLevel >= 4)
			{
				result = 1;
			}
			else
			{
				if (buttons & BT_MOVELEFT && buttons & BT_MOVERIGHT && CallACS("MiscVarCheckDECORATE",244) > 0)
				{
					result = 2;
				}
				else
				{
					result = 0;
				}
			}
		}
		else
		{
			if (buttons & BT_MOVELEFT && buttons & BT_MOVERIGHT && CallACS("MiscVarCheckDECORATE",244) > 0)
			{
				result = 2;
			}
			else
			{
				result = 0;
			}
		}
		return result;
	}
	
/*
	States
	{
		//*******************
		//** NORMAL ATTACK **
		//*******************
		// Base Level of Sceptre = 32[-6] Tics of Swing, 275-325 Damage, 130 Range, -5.75% Stamina
		SceptreSwingLv0:
			SCL0 A 1 { if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_SetTics(0); } } // 1 [lower 1]
			SCL0 B 1 { if (CallACS("GetBuffTimer",7) > 0) { A_SetTics(0); } } // 1 = 2 [lower 2]
			SCL0 C 1 // 1 = 3 [lower 3]
			SCL0 D 1 { if (CallACS("GetBuffTimer",7) > 0) { A_SetTics(0); } } // 1 = 4 [lower 4]
			SCL0 E 1 // 1 = 5 [lower 5]
			SCL0 F 1 { if (CallACS("GetBuffTimer",7) > 0) { A_SetTics(0); } } // 1 = 6 [lower 6]
			SCL0 G 1 { if (CallACS("MiscVarCheckDECORATE",10035) >= 2) { A_SetTics(0); } } // 1 = 7 [lower 7]
			SCL0 H 1 { if (CallACS("GetBuffTimer",7) > 0) { A_SetTics(0); } } // 1 = 8 [lower 8]
			SCL0 I 1 // 1 = 9 [lower 9]
		SceptreSwingLv0Hold:
			SCL0 J 1 // 1 = 10 [lower 10]
			{
				A_GiveInventory("PrimingSceptre",1);
				A_WeaponReady(WRF_NOFIRE|WRF_ALLOWUSER1|WRF_DISABLESWITCH);
			}
			TNT1 A 0
			{
				A_HoldInWeapon(0);
				if (dvds_sceptrefirekeytype == 0)
				{
					If (CountInv("MiscResult") == 0) { return state("SceptreSwingLv0Swing"); }
					If (CountInv("MiscResult") == 1) { return state("SceptreSwingLv0Raise"); }
					If (CountInv("MiscResult") == 2) { return state("SceptreSwingLv0Hold"); }
					return state("");
				}
				else
				{
					If (CountInv("MiscResult") == 2) { return state("SceptreSwingLv0Swing"); }
					If (CountInv("MiscResult") == 1) { return state("SceptreSwingLv0Raise"); }
					If (CountInv("MiscResult") == 0) { return state("SceptreSwingLv0Hold"); }
					return state("");
				}
				return state("");
			}
			loop

		SceptreSwingLv0Swing:
			TNT1 A 0
			{
				A_GetSceptreStaminaUse(0); A_UseStaminaAttack(CountInv("StamConsumed", AAPTR_PLAYER1),2);
				if (CountInv("StamUsed", AAPTR_PLAYER1) == 0) { return state("SceptreSwingLv0Raise"); }
				return state("");
			}
			TNT1 A 0
			{
				CallACS("AddSceptreEXP",0,1,1,0); // Increase EXP by 1 Point for Sceptre
				A_GiveInventory("SwingDefense0",1);
				if (random(1,256) >= (193 + (CallACS("OtherVarCheckDECORATE",11)) * 3)) { A_PlaySound("FloraKiaiFull",CHAN_VOICE); }
				A_PlaySound("SceptreSwingLvl0",CHAN_WEAPON);
				return state("");
			}
			SCEM D 1 { if (CallACS("GetBuffTimer",7) > 0) { A_SetTics(0); } } // 1 = 11 [swing 1]
			SCEM E 1 { if (CallACS("MiscVarCheckDECORATE",10035) >= 5) { A_SetTics(0); } } // 1 = 12 [swing 2]
			SCEM F 1 { if (CallACS("GetBuffTimer",7) > 0) { A_SetTics(0); } } // 1 = 13 [swing 3]
			SCEM G 1 // 1 = 14 [swing 4]
			goto SceptreSwingHit
		SceptreSwingLv0End:
			TNT1 A 0 A_SetAngle(angle-90)
			TNT1 AAAAAAA 0
			{
				A_SetAngle(angle+22.5); 
				A_SceptreSwingShield();
			}
			TNT1 A 0 A_SetAngle(angle-67.5)
			SCEM H 1 bright { if (CallACS("GetBuffTimer",7) > 0) { A_SetTics(0); } } // 1 = 15 [Attacking Frame] [H] [swing 5]
			SCEM I 1 // 1 = 16 [swing 6]
			SCEM J 1 { if (CallACS("GetBuffTimer",7) > 0) { A_SetTics(0); } } // 1 = 17 [swing 7]
			SCEM K 1 { if (CallACS("MiscVarCheckDECORATE",10035) >= 5) { A_SetTics(0); } } // 1 = 18 [swing 8]
			SCEM L 1 { if (CallACS("GetBuffTimer",7) > 0) { A_SetTics(0); } } // 1 = 19 [swing 9]
			SCEM M 1 // 1 = 20 [swing 10]
			SCEM N 1 { if (CallACS("GetBuffTimer",7) > 0) { A_SetTics(0); } } // 1 = 21 [swing 11]
			SCEM O 1 // 1 = 22 [swing 12]

		SceptreSwingLv0Raise:
			SCL0 J 1 { if (CallACS("GetBuffTimer",7) > 0) { A_SetTics(0); } } // 1 = 23 [raising 1]
			SCL0 I 1 { if (CallACS("MiscVarCheckDECORATE",10035) >= 1) { A_SetTics(0); } } // 1 = 24 [raising 2]
			SCL0 H 1 { if (CallACS("GetBuffTimer",7) > 0) { A_SetTics(0); } } // 1 = 25 [raising 3]
			SCL0 G 1 // 1 = 26 [raising 4]
			SCL0 F 1 { if (CallACS("GetBuffTimer",7) > 0) { A_SetTics(0); } } // 1 = 27 [raising 5]
			SCL0 E 1 // 1 = 28 [raising 6]
			SCL0 D 1 { if (CallACS("GetBuffTimer",7) > 0) { A_SetTics(0); } } // 1 = 29 [raising 7]
			SCL0 E 1 { if (CallACS("MiscVarCheckDECORATE",10035) >= 4) { A_SetTics(0); } } // 1 = 30 [raising 8]
			SCL0 C 1 { if (CallACS("GetBuffTimer",7) > 0) { A_SetTics(0); } } // 1 = 31 [raising 9]
			SCL0 B 1 // 1 = 32 [raising 10]
			goto EndSceptreSwing


		// States for Actual Swing Attacks [referenced by all above states]
		SceptreSwingHit:
			TNT1 A 0 A_GetSceptreSwingRecoil(0)
			TNT1 A 0 A_SetAngle(angle-90)
			TNT1 AAAAAAA 0 
			{
				A_SetAngle(angle+22.5);
				A_GetSceptreDamage(0);
				A_GetSceptreRange(0);
				A_SpreadAuraCustomPunch((CountInv("FinalMeleeDamageDealt",AAPTR_PLAYER1)),1,CPF_NOTURN,"SceptrePuff-Normal",CountInv("MeleeAtkRange",AAPTR_PLAYER1),0,0,"","","");
			}
			TNT1 A 0 A_SetAngle(angle-67.5)
			goto SwingLevelCheckEnd


		// Finishes off the normal-type Swings
		SwingLevelCheckEnd:
			TNT1 A 0
			{
				if (random(1,256) >= 253)
				{
					if (CountInv("PlayingStrife",AAPTR_PLAYER1) > 0) { } // Strife mode makes the punch work like the Punch Dagger where it NEVER makes sound
					else { A_AlertMonsters; } // Sometimes a swing will be enough to wake up all monsters in the area.
				}
			}
			goto SceptreSwingLv0End

		EndSceptreSwing:
			TNT1 A 0
			{
				A_SetInventory("PrimingSceptre",0);
				A_SetInventory("SwingDefense0",0);
				A_SetInventory("SwingDefense1",0);
				A_SetInventory("SwingDefense2",0);
				A_SetInventory("SwingDefense3",0);
				A_Refire;
			}
			goto Ready

		ReadySceptreSwing:
			goto SceptreSwingLv0

		Fire:
			TNT1 A 0 
			{
				A_SceptreShieldOff;
				CallACS("MiscVarSetDECORATE",397,0);
			}
			goto ReadySceptreSwing

	//***********
	//*DEFENSIVE*
	//***********

		TwirlFail:
			TNT1 A 0
			{
				A_SceptreShieldOff;
				CallACS("MiscVarSetDECORATE",397,0);
			}
			goto Ready


		// Twirling Animation A [Levels 0 to 7]
		TwirlCheckA:
			FLHS A 1
			{
				A_UseStaminaAttack(21,2);
				A_SceptreTwirlManaCheck(0);
				if (CountInv("HaveMana", AAPTR_PLAYER1) == 0 || CountInv("StamUsed", AAPTR_PLAYER1) == 0) { return state("TwirlFail"); }
				return state("");
			}
			TNT1 A 0
			{
				A_SceptreTwirlFrameCheck(3); // ACS_NamedExecute("SceptreTwirlFrameCheck",0,3,0,0);
				A_SceptreShield1; 
				CallACS("MiscVarSetDECORATE",397,1);

				A_SpawnItemEx("ShieldSpawner", 0, 32, 0, 0, 0, 0, -270, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				//A_SceptreAltFireShield;

				A_SceptreTwirlVisualFrames(0);
				return state("");
			}
			goto AltHold2


		// Twirling Animation B [Levels 8 to 14]
		TwirlCheckB:
			FLHS A 1
			{
				A_UseStaminaAttack(18,2);
				A_SceptreTwirlManaCheck(0);
				if (CountInv("HaveMana", AAPTR_PLAYER1) == 0 || CountInv("StamUsed", AAPTR_PLAYER1) == 0) { return state("TwirlFail"); }
				return state("");
			}
			TNT1 A 0
			{
				A_SceptreTwirlFrameCheck(4); // ACS_NamedExecute("SceptreTwirlFrameCheck",0,4,0,0);
				A_SceptreShield2; 
				CallACS("MiscVarSetDECORATE",397,2);

				A_SpawnItemEx("ShieldSpawner", 0, 32, 0, 0, 0, 0, -270, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				//A_SceptreAltFireShield;

				A_SceptreTwirlVisualFrames(1);
				return state("");
			}
			goto AltHold2


		// Twirling Animation C [Levels 15+]
		TwirlCheckC:
			FLHS A 1
			{
				A_UseStaminaAttack(14,2);
				A_SceptreTwirlManaCheck(0);
				if (CountInv("HaveMana", AAPTR_PLAYER1) == 0 || CountInv("StamUsed", AAPTR_PLAYER1) == 0) { return state("TwirlFail"); }
				return state("");
			}
			TNT1 A 0
			{
				A_SceptreTwirlFrameCheck(6); // ACS_NamedExecute("SceptreTwirlFrameCheck",0,6,0,0);
				A_SceptreShield3;
				CallACS("MiscVarSetDECORATE",397,3);

				A_SpawnItemEx("ShieldSpawner", 0, 32, 0, 0, 0, 0, -270, SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				//A_SceptreAltFireShield;

				A_SceptreTwirlVisualFrames(2);
				return state("");
			}
			goto AltHold2

		AltFire:
			TNT1 A 0
			{
				A_SceptreTwirlManaCheck(0);
				if (CountInv("HaveMana", AAPTR_PLAYER1) == 0) { return state("TwirlFail"); }
				return state("");
			}
		AltHold:
			TNT1 A 0
			{
				A_WeaponReady(WRF_NOFIRE|WRF_ALLOWUSER1|WRF_DISABLESWITCH); // Allows Quick-Kicking to interupt the Shield mode :V
				if (CallACS("OtherVarCheckDECORATE",11) <= 7) { return state("TwirlCheckA"); }
				if (CallACS("OtherVarCheckDECORATE",11) >= 8 && CallACS("OtherVarCheckDECORATE",11) <= 14) { return state("TwirlCheckB"); }
				if (CallACS("OtherVarCheckDECORATE",11) >= 15) { return state("TwirlCheckC"); }
				return state("");
			}
			goto TwirlCheckA

		AltHold2:
			TNT1 A 0
			{
				A_Refire;
			}
			TNT1 A 0
			{
				A_SceptreShieldOff;
				A_SceptreTwirlFrameCheck(0); // ACS_NamedExecute("SceptreTwirlFrameCheck",0,0,0,0);
				CallACS("MiscVarSetDECORATE",397,0);
			}
			goto Ready

		// Other 'Normal States'
		Ready:
			SCEM A 1
			{
				if (GetCVar("dvds_florasceptrecrosshair") > 0) { A_SetCrosshair(8); } else { A_SetCrosshair(0); }
				A_SetInventory("DrawingDiarisBow",0);
				A_WeaponReady(WRF_ALLOWUSER1);
				if (random(1,100) <= 95) { A_ChangeFlag("WEAPON.MELEEWEAPON", TRUE); } else { A_ChangeFlag("WEAPON.MELEEWEAPON", FALSE); }
			}
			Loop

		Deselect:
			SCEM A 1
			{
				A_SetCrosshair(0);
				if (CallACS("OtherVarCheckDECORATE",11) >= 6) { A_Lower; }
				if (CallACS("OtherVarCheckDECORATE",11) >= 12) { A_Lower; }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_Lower; }
				A_Lower; A_Lower; A_Lower;
				A_SceptreShieldOff;
				CallACS("MiscVarSetDECORATE",397,0);
			}
			Loop

		Select:
			SCEM A 1
			{
				if (GetCVar("dvds_florasceptrecrosshair") > 0) { A_SetCrosshair(8); } else { A_SetCrosshair(0); }
				if (CallACS("OtherVarCheckDECORATE",11) >= 6) { A_Raise; }
				if (CallACS("OtherVarCheckDECORATE",11) >= 12) { A_Raise; }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_Raise; }
				A_Raise; A_Raise; A_Raise;
			}
			Loop

		Spawn:
			SERP A 0 NoDelay
			{
				if (CountInv("SceptreOfEmpyrea",AAPTR_PLAYER1) > 0) { A_FadeOut(1,1); }
				if (CallACS("CheckCharacterClass") != 2) { A_FadeOut(1,1); }
			}
			SERP C 1
			loop
	
		User1: // Kick - Sceptre version
			TNT1 A 0
			{
				A_GetKickStaminaUse(0); A_UseStaminaAttack(CountInv("StamConsumed", AAPTR_PLAYER1),2);
				if (CountInv("StamUsed", AAPTR_PLAYER1) == 0)
				{
					if (CountInv("PrimingSceptre",AAPTR_PLAYER1) > 0) 
					{
						if (CallACS("OtherVarCheckDECORATE",11) == 0) { return state("SceptreSwingLv0Hold"); } 
						else if (CallACS("OtherVarCheckDECORATE",11) == 1) { return state("SceptreSwingLv1Hold"); }
						else if (CallACS("OtherVarCheckDECORATE",11) == 2) { return state("SceptreSwingLv2Hold"); }
						else if (CallACS("OtherVarCheckDECORATE",11) == 3) { return state("SceptreSwingLv3Hold"); }
						else if (CallACS("OtherVarCheckDECORATE",11) == 4) { return state("SceptreSwingLv4Hold"); }
						else if (CallACS("OtherVarCheckDECORATE",11) == 5) { return state("SceptreSwingLv5Hold"); }
						else if (CallACS("OtherVarCheckDECORATE",11) == 6) { return state("SceptreSwingLv6Hold"); }
						else if (CallACS("OtherVarCheckDECORATE",11) == 7) { return state("SceptreSwingLv7Hold"); }
						else if (CallACS("OtherVarCheckDECORATE",11) == 8) { return state("SceptreSwingLv8Hold"); }
						else if (CallACS("OtherVarCheckDECORATE",11) == 9) { return state("SceptreSwingLv9Hold"); }
						else if (CallACS("OtherVarCheckDECORATE",11) == 10) { return state("SceptreSwingLv10Hold"); }
						else if (CallACS("OtherVarCheckDECORATE",11) == 11) { return state("SceptreSwingLv11Hold"); }
						else if (CallACS("OtherVarCheckDECORATE",11) == 12) { return state("SceptreSwingLv12Hold"); }
						else if (CallACS("OtherVarCheckDECORATE",11) == 13) { return state("SceptreSwingLv13Hold"); }
						else if (CallACS("OtherVarCheckDECORATE",11) == 14) { return state("SceptreSwingLv14Hold"); }
						else if (CallACS("OtherVarCheckDECORATE",11) == 15) { return state("SceptreSwingLv15Hold"); }
						else if (CallACS("OtherVarCheckDECORATE",11) == 16) { return state("SceptreSwingLv16Hold"); }
					}
					return state("Ready"); 
				}
				return state(""); 
			}
			TNT1 A 0
			{
				if (random(1,256) >= 253)
				{
					if (CountInv("PlayingStrife",AAPTR_PLAYER1) > 0) { } // Strife mode makes the punch work like the Punch Dagger where it NEVER makes sound
					else { A_AlertMonsters; } // Sometimes a swing will be enough to wake up all monsters in the area.
				}
				CallACS("StartTensionCountDown");
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5) { A_GiveInventory("KickAttackDEFLvl2",1); } else { A_GiveInventory("KickAttackDEFLvl1",1); }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5) { A_GiveInventory("MartArtsMaster2",1); }
				if (CallACS("MiscVarCheckDECORATE",10035) == 4) { A_GiveInventory("MartArtsMaster1",1); }
				if (random(1,256) > 64) { A_GiveInventory("KickCritBonus1",1,AAPTR_PLAYER1); } else { A_GiveInventory("KickCritBonus2",1,AAPTR_PLAYER1); }
				A_GiveInventory("UsingMeleeAttack",1);
			}
			goto KickStart
		KickEnd:
			TNT1 A 0
			{
				A_KickBonusOff;
	
				if (CountInv("PrimingSceptre",AAPTR_PLAYER1) > 0) 
				{
					if (CallACS("OtherVarCheckDECORATE",11) == 0) { return state("SceptreSwingLv0Hold"); } 
					else if (CallACS("OtherVarCheckDECORATE",11) == 1) { return state("SceptreSwingLv1Hold"); }
					else if (CallACS("OtherVarCheckDECORATE",11) == 2) { return state("SceptreSwingLv2Hold"); }
					else if (CallACS("OtherVarCheckDECORATE",11) == 3) { return state("SceptreSwingLv3Hold"); }
					else if (CallACS("OtherVarCheckDECORATE",11) == 4) { return state("SceptreSwingLv4Hold"); }
					else if (CallACS("OtherVarCheckDECORATE",11) == 5) { return state("SceptreSwingLv5Hold"); }
					else if (CallACS("OtherVarCheckDECORATE",11) == 6) { return state("SceptreSwingLv6Hold"); }
					else if (CallACS("OtherVarCheckDECORATE",11) == 7) { return state("SceptreSwingLv7Hold"); }
					else if (CallACS("OtherVarCheckDECORATE",11) == 8) { return state("SceptreSwingLv8Hold"); }
					else if (CallACS("OtherVarCheckDECORATE",11) == 9) { return state("SceptreSwingLv9Hold"); }
					else if (CallACS("OtherVarCheckDECORATE",11) == 10) { return state("SceptreSwingLv10Hold"); }
					else if (CallACS("OtherVarCheckDECORATE",11) == 11) { return state("SceptreSwingLv11Hold"); }
					else if (CallACS("OtherVarCheckDECORATE",11) == 12) { return state("SceptreSwingLv12Hold"); }
					else if (CallACS("OtherVarCheckDECORATE",11) == 13) { return state("SceptreSwingLv13Hold"); }
					else if (CallACS("OtherVarCheckDECORATE",11) == 14) { return state("SceptreSwingLv14Hold"); }
					else if (CallACS("OtherVarCheckDECORATE",11) == 15) { return state("SceptreSwingLv15Hold"); }
					else if (CallACS("OtherVarCheckDECORATE",11) == 16) { return state("SceptreSwingLv16Hold"); }
					return state("Ready"); 
				}
				return state("Ready");
			}
			goto Ready
	}
*/
	
}
